[["index.html", "Environmental Statistics Summer term 2021 Preface Online teaching Intended learning outcomes (ILOs) Literature Why these lecture notes Acknowledgements", " Environmental Statistics Summer term 2021 Christina Bogner 2021-06-12 Preface The most exciting phrase to hear in science, the one that heralds new discoveries, is not ‚ÄòEureka!‚Äô but ‚ÄòThat‚Äôs funny‚Ä¶‚Äô ‚Äî Isaac Asimov Online teaching The corona virus pandemic impacts our lives and changes the way we teach and learn. This course will be held online. Please be patient if not all activities turn out to be successful and not all technical tools function as desired. We all will do our best to support you in your curriculum. In this course, we will use the following tools: ILIAS: the moodle platform at the UoC. You should all be registered there already. Campuswire: a chat platform to decrease the number of emails and allow for a more natural exchange between participants and lecturer. You should have received an invitation email, if not, send me an email, please. Zoom: will be used for live presentations. Please check the registration requirements on ILIAS. RStudio Server Pro: a server with a running R and RStudio installation. We will be working there. Intended learning outcomes (ILOs) At the end of this course you should be able to Write simple R scripts for data analysis. Explain statistical methods learnt in this course. Apply statistical methods learnt in this course. Apply selected methods to a new data set and write a report. Literature We will be using the book ModernDive: Statistical Inference via Data Science (Ismay and Kim 2021) mainly. Additionally, I will recommend from time to time R for Data Science (Wickham and Grolemund 2021) and OpenIntro Statistics (Diez, √áetinkaya-Rundel, and Barr 2019). For your report, you will do an additional literature search depending on your topic. Why these lecture notes This document is a working and live document that will be updated during the course. It is not comprehensive, but should help you to navigate through the introduction to R and statistics smoothly. I will use different colour boxes Infos and tips Learning outcomes This is important This is an exercise inside a chapter. Acknowledgements This document is based on the free material provided by ModernDive: Ismay and Kim (2021) and their free Problem Sets authored by Jenny Smetzer, William Hopper, Albert Y. Kim, and Chester Ismay (https://moderndive.github.io/moderndive_labs/index.html) R for Data Science (r4ds): Wickham and Grolemund (2021) Data Science in a Box (https://datasciencebox.org/) and the free book by Diez, √áetinkaya-Rundel, and Barr (2019) One cannot thank those people enough for their contribution to the community ! Credit: https://xkcd.com/2400/ This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. References "],["introduction-to-r-and-rstudio-server-pro.html", "1 Introduction to R and RStudio Server Pro 1.1 Opening RStudio Server Pro 1.2 The RStudio interface 1.3 File management 1.4 Practice on your own! 1.5 Turning in your work 1.6 Logging out of the server 1.7 Reading assignment", " 1 Introduction to R and RStudio Server Pro Login into the RStudio Server Pro Upload and download files from the server Use R as a calculator Create first objects in R Do you very first plot This chapter introduces you to R and RStudio which you‚Äôll be using throughout the course both to learn statistical concepts and to analyse real data. To clarify which is which: R is the name of the programming language itself and RStudio is a convenient development environment that will make your life easier. Today we begin with the fundamental building blocks of R and RStudio: the interface, creating and saving files, and basic commands. 1.1 Opening RStudio Server Pro We will work in the RStudio Server Pro, an online R System. Thus, you don‚Äôt need to install R or RStudio on your computer (yet). You will receive a login and a password for the server. Do not share your credentials. In case of difficulties I might need to login into your RStudio Server account. To allow me to do so, you need to sign an agreement and to email it me. Before you can login into the server, you need to activate the VPN client. If you are not familiar with the VPN client, please visit this website. To login into the RStudio Server, click hier. Or copy the address into your browser: https://cheops-rstudio-edu.rrz.uni-koeln.de:8787/auth-sign-in.htm. After logging in, you will see the home interface (Figure 1.1). Figure 1.1: RStudio Server Pro Home To start a new session, click on the button New Session next to the R symbol and choose the following settings (you can rename the session if you wish): Figure 1.2: Starting a new session 1.2 The RStudio interface In RStudio Server you should see a window that looks like in Figure 1.3. Figure 1.3: RStudio interface The panel on the left is where the action happens. It‚Äôs called the console. Every time you launch RStudio, it will have the same text at the top of the console telling you the version of R that you‚Äôre running. The panel in the upper right contains your workspace. This shows the variables and objects you define during your R session, and a history of the commands that you enter. Any plots that you generate will show up in the panel in the lower right corner. This is also where you can browse your files, and access help files, and upload and download files. 1.3 File management We will start by making a data folder in RStudio Server that you can use to store all your data sets. Click on the Files tab in the lower right panel, and the New Folder tab. Enter the folder name data in the window that opens, and click OK. You should now have a new folder! Next, go to the course site, and download the file meteo.csv posted for this week‚Äôs session. Put it in a location on your computer that you will remember! I highly suggest you also make a folder for the course and there a data folder on your computer to store the material for this course. To have access to files stored on the hard drive on your computer in RStudio Server, you need to upload them from your computer to the server. To upload the data set click on the RStudio Server data folder once, and click the upload button, like so: Figure 1.4: Upload files In the window that opens, browse to where you stored your data set on your computer, click on the data file, then click OK. Open the data folder again in RStudio Server, to make sure the data is in there. You can upload any sort of file like this. We are not doing anything with this meteo.csv file, except learning how to upload it. To download a file first mark it (you can mark several files) by clicking on the little square left to it. Then, click the button More &gt; Export &gt; Download (Figures 1.5 and 1.6). Save the file(s) on your computer. Figure 1.5: Select files to download Figure 1.6: Save files 1.4 Practice on your own! To complete this problem set you will next run through some Exercises, and submit your R script (i.e.¬†.R file) with answers to all the Exercises. If you need to type text, don‚Äôt forget to use the comment sign # before typing your text so that R will not misinterpret your text as commands. Remember to save your work as you go along! Click the save button in the upper left hand corner of the window. We will start the exercises 7.1.1 and 7.1.2 in class. Finish the exercises on your own and produce your first plot in exercise 7.1.3 üòÑ. 1.5 Turning in your work Save your R script and download the .R file to your computer. Upload your .R file to ILIAS. You will find an upload option in today‚Äôs session. You should receive a solution file after the deadline. Be sure to upload before the deadline! 1.6 Logging out of the server There are other classes and students using the server. To keep it as fast as possible, it is best if you sign out when you are done. To do so follow all the same steps for closing an R Markdown document as above: Save all your work, i.e.¬†the R document. Click on the orange button in the far right corner of the screen to quit R. Choose don‚Äôt save for the Workspace image. When the browser refreshes, you can click on the button Sign Out next to your login in the top right. You are signed out! 1.7 Reading assignment Chapters 1.1. and 1.2 in Ismay and Kim (2021) References "],["using-r-markdown.html", "2 Using R Markdown 2.1 Opening a new R Notebook 2.2 Make changes to a file 2.3 Saving a file 2.4 Preview 2.5 Other output options 2.6 Entering and running commands 2.7 A brief recap of data types 2.8 Practice on your own! 2.9 Turning in your work", " 2 Using R Markdown Opening and saving an R Notebook Basic layout in R Markdown 2.1 Opening a new R Notebook When you want to write a paper, you have to open a Word document to type your ideas into, and save your work in. In R we use a document type called an R Markdown document. R Markdown documents are useful for both running code, and annotating the code with comments. The document can be saved, so you can refer back to your code later, and can be used to create other document types (html, word, pdf, or slides) for presenting the results of your analyses. R Markdown provides a way to generate clear and reproducible statistical analyses. There are different types of R Markdown documents. We will usually use the R Notebook. To open a new R Notebook, click on the little green plus on the upper left hand and select R Notebook as in the image below. You can leave it untitled. Figure 2.1: How to create a new R Notebook When you open a new R Notebook, there is some example code in it that you can get rid of. We will take care of this next. 2.2 Make changes to a file Let‚Äôs make some changes to the R Markdown file you just opened. Using the image below as a guide First, change the title at the top to ‚ÄúGetting to know R Notebooks.‚Äù Be sure to keep the quotation marks. Second, add an author line, following the example below. You need quotation marks! Third, delete everything in the document from line 6 downwards. Fourth, add headers and text, exactly following the example below. Finally, insert what is called a ‚Äúcode chunk.‚Äù To do this you click on the insert button near the top centre of the screen, then choose R. The greyed out box that shows up is where you type code. Your final result should look like this: Figure 2.2: An R Notebook 2.3 Saving a file I suggest to create a new folder Notebooks to save all your R Notebooks. You will complete your lab work in an R Notebook file like this each week, so it is important to learn how to save these files. Click File &gt; Save As‚Ä¶ Browse to the Notebooks course folder you just created Name the file: Session2_lastname_firstname (fill in your firstname and lastname) Click save This is now saved in the Notebooks folder on the server. 2.4 Preview Notebooks have the great advantage to offer the preview of your work. Just click the Preview button. The preview is refreshed every time you save your notebook. 2.5 Other output options You can also produce different outputs from your R Notebook because it is a normal R Markdown file and supports different output formats. However, if you produce an .html output, the Preview button will disappear! To bring it back, you need to edit the header of your R Notebook file to output: html_notebook. Note that there is now an R Notebook file (.Rmd) and an html file (nb.html) in the Notebooks folder. Inspect the preview of your notebook to see how what you typed was formatted. There are lots of tricks for controlling the formatting of the knitted html file. For instance: putting ## and a space in front of text makes it into a large header. For example, see how ## This is a header in your R Markdown .Rmd file translates in the resulting .html output. putting ### and a space in front of text makes it a smaller header! 2.6 Entering and running commands The code chunks are where you put R code in an R Markdown file. So far, your preview doesn‚Äôt show anything, because we did not put any content in the code chunks yet! Using your first code chunk, type the following command to create a new variable called x with the value of 6. x &lt;- 6 The arrow &lt;- is called an ASSIGNMENT OPERATOR, and tells R to save an object called x that has the value of 6. This is similar to saving a value in a graphing calculator. Note that whatever you want to save must always be to the left of the assignment operator!! To actually RUN this command in your console, you have a few options: click on the green triangle in the code chunk highlight the code and hit Control-Enter on a PC or Command-Return on a Mac Think of ‚Äúrunning‚Äù code in your console as telling R ‚Äúdo this.‚Äù Note that you now have a new object in your workspace, called x! Figure 2.3: Global environment contains the variable x now 2.7 A brief recap of data types So far you have made a numeric variable x. There many other types of data objects you can make in R. First, copy, paste and run the following command in a new code chunk to make a character called favorite_movie. Think of characters as text as opposed to numerical values. Note that I told R that this was a character by putting quotation marks around Star_Wars. favorite_movie &lt;- &quot;Star_Wars&quot; Next, copy, paste and run the following command into a new code chunk. v &lt;- c(2, 4, 6) This makes what is called a vector, which we have named v. It is a data object that has multiple elements of the same type. This vector contains three numbers, 2, 4, and 6. The c() function says to r to concatenate the values 2, 4, 6, into a single vector. Note in the Environment pane that your vector v contains numbers (listed as num). You can do math on a vector that contains numbers! For instance, copy, paste and run the following command into a new code chunk. This tells R to multiply each element of the vector v by 3. v * 3 2.8 Practice on your own! To complete this problem set you will next run through some Exercises, and submit your R Notebook file with answers to all the Exercises. Please make a header for each of these Exercises. If you need to answer an Exercise with text, type the text below the header, on the next line, in the white part, and if you need to answer an Exercise with some code, insert a code chunk below the header, and put the code in the greyed out box. Remember to save your work as you go along! Click the save button in the upper left hand corner of the R Markdown window. Answer the following with code in a code chunk (no text necessary). Remember that the code is just instructions for R. You need to run the code chunk to make R execute those instructions! Create a variable called y with the value of 7 Multiply x by y, and store the answer in a variable named z like so: z &lt;- x * y You should now see favorite_movie, x, v, y, and z all in your Environment pane Run the following mathematical operation in a code chunk: 6 + 3 Where does the answer appear? (please answer with text) Now add a code chunk, and save the results of 6 + 3 as a variable called a. Does the answer appear? (please answer with text) Where does the object a show up? (please answer with text) Next type a into the code chunk and re-run the code chunk. What happens? (please answer with text) Run following command in a new code chunk. a^2. What does the ^ operator do? (please answer with text) Type the following command into a new code chunk. sum(a, x, y) sum is a function. Based on the output, what do you think the sum function does? (please answer with text) Click the little broom icon in the upper right hand corner of the Environment pane. Click yes on the window that opens. What happened? (please answer with text, and don‚Äôt freak out) Go to the Run button at the top right of the R Markdown pane, and choose Run All (the last option) What happened? (please answer with text) Recall the vector v we created earlier. Copy, paste and run the following in a code chunk. What does this code accomplish? v + 2 Please answer with text. Copy, paste, and run the following code to make a vector called music, that contains music genres. Recall a vector is a data object that has multiple elements of the same type. Here the data type is a character. Look in the environment pane. How does R tell us that this vector contains characters, not numbers? music &lt;- c(\"bluegrass\", \"funk\", \"folk\") Please answer with text. Now let‚Äôs practice some basic formatting. Using this formatting tips page figure out how to put the following into your lab report. These all can get typed into the white section, where text goes. Hint: To put each of these on its own line! hit a hard return between each line of text. Italicize like this Bold like this A superscript: R2 2.9 Turning in your work Save your R Notebook and download the .Rmd file to your computer. You don‚Äôt need to download the .nb.html file. Upload your R Notebook to ILIAS. You will find an upload option in today‚Äôs session. You should receive a solution file after the deadline. Be sure to upload before the deadline! "],["what-is-data.html", "3 What is data? 3.1 Installing R packages 3.2 Welcome the penguins! 3.3 The square braces revisited 3.4 Let‚Äôs see them 3.5 Practice on your own! 3.6 Reading assignment 3.7 Turning in your work 3.8 Additional reading", " 3 What is data? Install an R package Load an installed data set Explore a data set and recognize the type of its variables Data can be anything üòÑ. Usually we will store data in a rectangular form, i.e.¬†variables in columns and observations in rows. There are two dedicated object formats to store data, namely data.frame() and tibble(). They have both similar characteristics, however, the tibble is considered the modern form of a data frame and offers some advantages (details later). In this chapter, we will have a look at a data set called palmerpenguins. It is provided in a dedicated package, so let‚Äôs install this package first. 3.1 Installing R packages Packages that are available on the official CRAN (Comprehensive R Archive Network) can be installed with function install.packages('name_of_the_package'). It is important to provide the name of the package in quotes (single or double). install.packages(&#39;palmerpenguins&#39;) To load a package, use the function library(name_of_the_package), this time without quotes! library(palmerpenguins) 3.2 Welcome the penguins! Figure 3.1: Artwork by @allison_horst The package has a dedicated website that is really worth visiting. The package contains two data sets, we will explore the shorter one, called penguins. To load a data set installed with a package, use the function data(\"name_of_data_set\"). Be sure to put the name of the data set in quotes (single or double). data(&quot;penguins&quot;) Let‚Äôs have a look at the object penguins. penguins ## # A tibble: 344 x 8 ## species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 Adelie Torgersen 39.1 18.7 181 3750 ## 2 Adelie Torgersen 39.5 17.4 186 3800 ## 3 Adelie Torgersen 40.3 18 195 3250 ## 4 Adelie Torgersen NA NA NA NA ## 5 Adelie Torgersen 36.7 19.3 193 3450 ## 6 Adelie Torgersen 39.3 20.6 190 3650 ## 7 Adelie Torgersen 38.9 17.8 181 3625 ## 8 Adelie Torgersen 39.2 19.6 195 4675 ## 9 Adelie Torgersen 34.1 18.1 193 3475 ## 10 Adelie Torgersen 42 20.2 190 4250 ## # ‚Ä¶ with 334 more rows, and 2 more variables: sex &lt;fct&gt;, year &lt;int&gt; This object is a tibble and contains a data set with 344 rows and 8 columns, meaning we have 8 variables measured on 344 animals. The first column contains the variable species that, you guessed it, shows the species of the animal. This variable is a so-called factor (indicated by &lt;fct&gt; below species). It means, it contains categorical information and has a certain number (usually a small one) of distinct values called levels. The levels in this case are levels(penguins$species) ## [1] &quot;Adelie&quot; &quot;Chinstrap&quot; &quot;Gentoo&quot; The above code uses the $ sign to access a whole column (i.e.¬†variable) in the data set. This is very handy and an alternative to the square bracket method. The syntax is name_of_data_set$name_of_variable. There are also numerical variables in the tibble. A numerical variable can be continuous, e.g.¬†bill_length_mm (indicated by &lt;dbl&gt; meaning double), meaning that it contains decimal numbers or discrete, e.g.¬†year (indicated by &lt;int&gt; meaning integer), meaning that it contains integers (whole numbers). To summarize the data set, we can use the function summary(). summary(penguins) ## species island bill_length_mm bill_depth_mm ## Adelie :152 Biscoe :168 Min. :32.10 Min. :13.10 ## Chinstrap: 68 Dream :124 1st Qu.:39.23 1st Qu.:15.60 ## Gentoo :124 Torgersen: 52 Median :44.45 Median :17.30 ## Mean :43.92 Mean :17.15 ## 3rd Qu.:48.50 3rd Qu.:18.70 ## Max. :59.60 Max. :21.50 ## NA&#39;s :2 NA&#39;s :2 ## flipper_length_mm body_mass_g sex year ## Min. :172.0 Min. :2700 female:165 Min. :2007 ## 1st Qu.:190.0 1st Qu.:3550 male :168 1st Qu.:2007 ## Median :197.0 Median :4050 NA&#39;s : 11 Median :2008 ## Mean :200.9 Mean :4202 Mean :2008 ## 3rd Qu.:213.0 3rd Qu.:4750 3rd Qu.:2009 ## Max. :231.0 Max. :6300 Max. :2009 ## NA&#39;s :2 NA&#39;s :2 3.3 The square braces revisited You already know how to access a certain position inside a vector. A tibble is a tow-dimensional object, it has rows and columns. To access a particular measurement, you need to provide both, its row and its column index. The following code picks the value in the first row and third column: penguins[1, 3] ## # A tibble: 1 x 1 ## bill_length_mm ## &lt;dbl&gt; ## 1 39.1 3.4 Let‚Äôs see them We will talk much more about data visualisation later. For now, just use the code below to visualize the relationship between the flipper length and the body mass of the animals. library(ggplot2) ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g, col = species)) + geom_point() + xlab(&#39;Flipper length (mm)&#39;) + ylab(&#39;Body mass (g)&#39;) 3.5 Practice on your own! How many categorical and how many numerical variables are there? Consult help. How many Gentoo penguins are present in the data set? What is the time span of the measurements? Find the levels of the variable island. This is a challenge ü§ì. Take the code that produced the visualisation of flipper length and the body mass of the animals. Make an educated guess how to change the code such that it produces the visualisation of the bill depth vs.¬†body mass. Can you also guess how to adjust the label on the x axis? 3.6 Reading assignment Chapter 1.3 in Ismay and Kim (2021). 3.7 Turning in your work Save your R Notebook and download the .Rmd file to your computer. You don‚Äôt need to download the .nb.html file. Upload your R Notebook to ILIAS. You will find an upload option in today‚Äôs session. You should receive a solution file after the deadline. Be sure to upload before the deadline! 3.8 Additional reading In case you prefer flights to penguins, you can have a look at data exploration in Chapter 1.4 in Ismay and Kim (2021) References "],["import-visualize-and-explore-data.html", "4 Import, visualize and explore data 4.1 Data import from text files 4.2 Visualization with the library ggplot2 4.3 Histogram 4.4 Boxplot 4.5 Practice on your own! 4.6 Reading assignment 4.7 Turning in your work 4.8 Additional reading", " 4 Import, visualize and explore data Import data into R Explain the general call to the function ggplot() Plot 5 frequently used types of graphics 4.1 Data import from text files To import a data set from a text file (e.g.¬†.csv, .txt, .dat) into R, we will use the library readr which is part of the tydiverse. We first load the library. library(tidyverse) Let‚Äôs assume that the data is stored in the folder data. If this is not your case, change the path accordingly. To load the data, we can chose among several different functions that all start with read_. The most generic one is read_delim() where we can specify how the columns are separated (delimited) in the data file. emissions &lt;- read_delim(file = &#39;data/emissions.csv&#39;, delim = &#39;;&#39;) ## ## ‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ## cols( ## unit = col_character(), ## airpol = col_character(), ## vehicle = col_character(), ## geo = col_character(), ## time = col_date(format = &quot;&quot;), ## values = col_double() ## ) Let‚Äôs have a look at the data. This is a data set on greenhouse gas emissions by source sector in the EU that I downloaded from eurostat on 2021-04-30. It contains the greenhouse gas emissions in CO2 equivalent, in Mio tonnes, per vehicle type. The data base could be a great source for data in your reports üòÑ. emissions ## # A tibble: 2,871 x 6 ## unit airpol vehicle geo time values ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; ## 1 Million‚Ä¶ Greenhouse gases (CO2,‚Ä¶ Fuel comb‚Ä¶ Austria 2018-01-01 14.4 ## 2 Million‚Ä¶ Greenhouse gases (CO2,‚Ä¶ Fuel comb‚Ä¶ Belgium 2018-01-01 14.4 ## 3 Million‚Ä¶ Greenhouse gases (CO2,‚Ä¶ Fuel comb‚Ä¶ Bulgaria 2018-01-01 5.78 ## 4 Million‚Ä¶ Greenhouse gases (CO2,‚Ä¶ Fuel comb‚Ä¶ Switzerland 2018-01-01 11.0 ## 5 Million‚Ä¶ Greenhouse gases (CO2,‚Ä¶ Fuel comb‚Ä¶ Cyprus 2018-01-01 1.38 ## 6 Million‚Ä¶ Greenhouse gases (CO2,‚Ä¶ Fuel comb‚Ä¶ Czechia 2018-01-01 11.9 ## 7 Million‚Ä¶ Greenhouse gases (CO2,‚Ä¶ Fuel comb‚Ä¶ Germany (until‚Ä¶ 2018-01-01 97.8 ## 8 Million‚Ä¶ Greenhouse gases (CO2,‚Ä¶ Fuel comb‚Ä¶ Denmark 2018-01-01 6.85 ## 9 Million‚Ä¶ Greenhouse gases (CO2,‚Ä¶ Fuel comb‚Ä¶ Estonia 2018-01-01 1.52 ## 10 Million‚Ä¶ Greenhouse gases (CO2,‚Ä¶ Fuel comb‚Ä¶ Greece 2018-01-01 7.61 ## # ‚Ä¶ with 2,861 more rows The result of reading the data with any function in the library readr is always a tibble. You can see that none of the variables is a factor. This is the default behaviour of readr. If you want a variable to be coded as a factor then you have to transform it by hand, preferably with functions from the package forcats. Let‚Äôs have a quick look at the data set. summary(emissions) ## unit airpol vehicle geo ## Length:2871 Length:2871 Length:2871 Length:2871 ## Class :character Class :character Class :character Class :character ## Mode :character Mode :character Mode :character Mode :character ## ## ## ## ## time values ## Min. :1990-01-01 Min. : 0.00609 ## 1st Qu.:1997-01-01 1st Qu.: 0.25564 ## Median :2004-01-01 Median : 1.92403 ## Mean :2004-01-01 Mean : 8.52836 ## 3rd Qu.:2011-01-01 3rd Qu.: 6.93899 ## Max. :2018-01-01 Max. :119.77824 ## NA&#39;s :232 For character variables, summary() does not count the frequency of different values. However, we can get this information with the function unique(). length(unique(emissions$geo)) ## [1] 33 The data set contains measurements for 33 EU countries. We can also ask which different types of vehicle are recorded. unique(emissions$vehicle) ## [1] &quot;Fuel combustion in cars&quot; ## [2] &quot;Fuel combustion in heavy duty trucks and buses&quot; ## [3] &quot;Fuel combustion in railways&quot; 4.2 Visualization with the library ggplot2 The library ggplot2 is a powerful package for data visualisation. The name comes from the grammar of graphics and hints at a systematic approach to visualisation. In a nutshell, ggplot2 defines a statistical graphic as follows: A statistical graphic is a mapping of variables in a data set to aesthetic attributes of geometric objects. In ggplot2, a graphic is build up step by step, starting with a call to the core function ggplot(). We have to specify the following elements: data: the data set containing the variables to be visualised. aes: (aesthetic) attributes for the geometric object to be visualised. This can be the x and y variables, colour, shape, grouping variable etc. geom: the geometric object we want to plot, i.e.¬†lines, points, bars, boxes etc. 4.2.1 Line plot We start with the line plot that is particularly suited for time series. Because plotting 33 countries in one graph is too much, we first filter for France and emissions from cars. emissions_france &lt;- emissions %&gt;% filter(geo == &#39;France&#39; &amp; vehicle == &#39;Fuel combustion in cars&#39;) ggplot(data = emissions_france, mapping = aes(x = time, y = values)) This call to ggplot() prepares the plotting area as requested, but does not show anything because we did not specify any geometric object. All geometric objects begin with geom_. Every further step in building up the plot is appended to the core call by a +. ggplot(data = emissions_france, mapping = aes(x = time, y = values)) + geom_line() This call can be verbalised like following: Take the data set emissions and map the following attributes: on the x-axsis the variable time on the y-axsis the variable values Plot the data as a line (geom_line()) In order for the plot to be useful, we should label the axes correctly (and give it a title, if no figure caption is shown). This is done by adding the function labs(). ggplot(data = emissions_france, mapping = aes(x = time, y = values)) + geom_line() + labs(x = &#39;Time&#39;, y = &#39;Emissions (Mio tons)&#39;, title = &#39;Emissions in France&#39;) 4.2.2 Point plot We can add points to this plot with geom_point(). In principle, I wouldn‚Äôt do it for this time series, but I wan‚Äôt to show this geom üòÑ. ggplot(data = emissions_france, mapping = aes(x = time, y = values)) + geom_line() + geom_point() + labs(x = &#39;Time&#39;, y = &#39;Emissions (Mio tons)&#39;, title = &#39;Emissions in France&#39;) If we select two countries, then a further aesthetic will be required to distinguish the time series. Let‚Äôs select France and Italy. emissions_france_italy &lt;- emissions %&gt;% filter(geo %in% c(&#39;France&#39;, &#39;Italy&#39;) &amp; vehicle == &#39;Fuel combustion in cars&#39;) We plot the countries using different colours. Note that we do not (yet) select the colours by hand, but specify the variable that will be used to distinguish the time series. The colours are chosen one by country automatically. ggplot(data = emissions_france_italy, mapping = aes(x = time, y = values, colour = geo)) + geom_line() + geom_point() + labs(x = &#39;Time&#39;, y = &#39;Emissions (Mio tons)&#39;, title = &#39;Emissions in France and Italy&#39;, colour = &#39;Country&#39;) The legend comes for free! We can change the title of the legend by setting colour = 'Country' in the call to labs(). 4.3 Histogram Let‚Äôs have a look at the distribution of emissions in the year 2018. We have to filter the data first. emissions_2018 &lt;- emissions %&gt;% filter(time == &#39;2018-01-01&#39;) We plot the data in a histogram that shows the absolute frequencies of the data (i.e.¬†how many data points fall in a particular interval of emissions). It shows the distribution of a continuous variable. For a histogram, we only specify the x variable, the frequencies are calculated by geom_histogram() directly. We specify 25 bins (intervals). If you are not familiar with this kind of statistical summaries, please have a look at the Appendix A in Ismay and Kim (2021) and read the part A.1.5 Distribution. ggplot(data = emissions_2018, mapping = aes(x = values)) + geom_histogram(bins = 25) ## Warning: Removed 8 rows containing non-finite values (stat_bin). 4.4 Boxplot A boxplot calculates some prominent statistics of a data set and plots them in form of a box with ‚Äòwhiskers‚Äô (thus also called box-and-whiskers plot). Basically, it is the same as calculating the summary() (five-numbers: min, max, 25%, 50% and 75% quantiles), but as a figure. If you are not familiar with this kind of statistical summaries, please have a look at the Appendix A in Ismay and Kim (2021) and read the part A.1.4 Five-number summary. Lets have a look at this kind of summary plot. How are the emissions distributed by year? We have to convert time to a factor variable in order to display the data correctly (try out what happens if you don‚Äôt convert it). ggplot(data = emissions, mapping = aes(x = factor(time), y = values)) + geom_boxplot() ## Warning: Removed 232 rows containing non-finite values (stat_boxplot). Hmmm, the labels on the x axis are really ugly. Let‚Äôs tune them a little bit (we will do more tuning in later sessions). ggplot(data = emissions, mapping = aes(x = factor(time), y = values)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90)) ## Warning: Removed 232 rows containing non-finite values (stat_boxplot). 4.4.1 Barplot The last geom we want to see is geom_bar(). We want to know how many data entries does emissions contain per vehicle. ggplot(data = emissions, mapping = aes(x = vehicle)) + geom_bar() Admittedly, a boring plot üòÑ, the number of entries is identical. 4.5 Practice on your own! The histogram, the boxplot and the barplot plotted above are not labelled correctly. Correct the axis labels and find good titles for the graphs. Plot the time series of GDP from the data set gapminder for France and Germany. Filter the data like this: france_germany &lt;- gapminder %&gt;% filter(country %in% c('France', 'Germany')) Plot the life expectancy vs.¬†GDP in 2007, use the data set gapminder. Pick the code for filtering the data in task ref. Use the aesthetics colour and size. Have an educated guess on how to change the title of the legends (or google for it üòÑ). How is the GDP distributed in Africa and Europe in 2007? Use the data set gapminder. Filter the data like this: africa_europe &lt;- gapminder2007 %&gt;% filter(continent %in% c('Africa', 'Europe')). Plot the data as a histogram and use the aesthetic fill instead of colour to distinguish between continents. How is the GDP distributed on different continents in 2007? Use the data set gapminder. Plot the data as a boxplot. How many data points does gapminder contain per continent? Visualize in a barplot. 4.6 Reading assignment Chapter 2.1 in Ismay and Kim (2021) 4.7 Turning in your work Save your R Notebook and download the .Rmd file to your computer. You don‚Äôt need to download the .nb.html file. Upload your R Notebook to ILIAS. You will find an upload option in today‚Äôs session. You should receive a solution file after the submission. Be sure to upload before the deadline! 4.8 Additional reading Chapters 2.2 to 2.9 in Ismay and Kim (2021) References "],["tidyverse.html", "5 Explorative workflow with tidyverse 5.1 Core packages 5.2 Exploratory data analysis 5.3 Practice on your own! 5.4 Reading assignment 5.5 Additional reading and videos", " 5 Explorative workflow with tidyverse Name core packages in tidyverse Apply a simple explorative workflow (read, summarize, plot) with tidyverse Use functions from dplyr for data wrangling tidyverse is a collection of R packages for data analysis (https://www.tidyverse.org/). It shares a common philosophy about how data should be structure and grammar of data manipulation and visualisation. Although it might sound like something alien, tidyverse is a regular part of R and its functions can be mixed with base R functions. The best introduction to tidyverse is r4ds: ‚ÄúR for Data Science‚Äù (Wickham and Grolemund 2021). You can read it for free here (https://r4ds.had.co.nz/). 5.1 Core packages tidyverse comprises 8 core packages that are installed when you call install.packages('tidyverse'): Packages Description ggplot2 data visualization dplyr data transformation tidyr data cleaning readr importing data purrr functional programming tibble extension of data.frame stringr functions for strings, i.e.¬†text variables forcats functions for factor Every packages has a Cheat Sheet, an overview of its functions. To get a package‚Äôs cheat sheet click on its name (https://www.tidyverse.org/packages/), scroll down to the section Cheatsheet. Besides its core packages, tidyverse also installes a long list of supplementary packages that you can find here: https://www.tidyverse.org/packages/ 5.2 Exploratory data analysis Exploratory data analysis is a very important first step in data analysis. Before using any advanced statistical method, exploratory analysis is a must have. It comprises roughly the following steps: import and inspect data clean (tidy) data if necessary summarize it and create new variables if necessary plot as many different plots as possible to get a good overview about patterns and data distribution 5.2.1 Read data, revisited We load the library tidyverse first. library(tidyverse) Last time we used the function read_delim() to import data into R. This function is the most general from a whole family of functions, all starting with read_*: read_csv(), read_csv2() etc. They all have their own parameters that you need to verify on the respective help pages if you want to use them. For this exploratory data analysis we will use data from the German Meteo Service (Deutscher Wetterdienst) that I downloaded on 2020-05-24 (https://www.dwd.de/DE/leistungen/klimadatendeutschland/klimadatendeutschland.html). The data set contains hourly measurements of the relative air humidity (%) and air temperature (¬∞C) for three meteo stations, namely Hof, Frankfurt and K√∂ln-Bonn. The data is named meteo.csv. temp_humid &lt;- read_delim(&#39;data/meteo.csv&#39;, delim = &#39;;&#39;, trim_ws = T) ## ## ‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ## cols( ## STATIONS_ID = col_double(), ## MESS_DATUM = col_double(), ## QN_9 = col_double(), ## TT_TU = col_double(), ## RF_TU = col_double(), ## eor = col_character() ## ) read_delim() reports on reading the data about the variables it recognizes. This is a good hint to spot for possible problems. Are numerical variables read as &lt;dbl&gt;? Are characters recognized as &lt;char&gt; etc. In the code above, the parameter trim_ws = T removes leading zeroes. Let‚Äôs have a showr glimps of the data. temp_humid ## # A tibble: 39,600 x 6 ## STATIONS_ID MESS_DATUM QN_9 TT_TU RF_TU eor ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 2261 2018111900 3 -2.8 99 eor ## 2 2261 2018111901 3 -2.5 100 eor ## 3 2261 2018111902 3 -2.3 100 eor ## 4 2261 2018111903 3 -2 100 eor ## 5 2261 2018111904 3 -1.9 99 eor ## 6 2261 2018111905 3 -2.1 99 eor ## 7 2261 2018111906 3 -1.8 99 eor ## 8 2261 2018111907 3 -1.5 99 eor ## 9 2261 2018111908 3 -1.1 99 eor ## 10 2261 2018111909 3 -0.6 97 eor ## # ‚Ä¶ with 39,590 more rows The data set contains the following variables: Variable Description STATIONS_ID ID of the meteo station MESS_DATUM date and time of the measurement, formatted as yyyymmddhh QN_9 quality flag TT_TU air temperature in 2 m height in ¬∞C RF_TU relative air humidity in % eor end of record (i.e.¬†end of line) read_* always returns a tibble. class(temp_humid) ## [1] &quot;spec_tbl_df&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; 5.2.2 Date and time made easy A very useful package to handle date and time is called lubridate. It is not part of core packages in tidyverse but is installed with the long list of additional packages. We will use it to convert the variable MESS_DATUM to a real date-time variable. The function ymd_h() converts character vectors to date-time objects provided they have the format year, month, day, hour. There are other function for different other formats; consult help. library(lubridate) temp_humid$MESS_DATUM &lt;- ymd_h(temp_humid$MESS_DATUM) temp_humid ## # A tibble: 39,600 x 6 ## STATIONS_ID MESS_DATUM QN_9 TT_TU RF_TU eor ## &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 2261 2018-11-19 00:00:00 3 -2.8 99 eor ## 2 2261 2018-11-19 01:00:00 3 -2.5 100 eor ## 3 2261 2018-11-19 02:00:00 3 -2.3 100 eor ## 4 2261 2018-11-19 03:00:00 3 -2 100 eor ## 5 2261 2018-11-19 04:00:00 3 -1.9 99 eor ## 6 2261 2018-11-19 05:00:00 3 -2.1 99 eor ## 7 2261 2018-11-19 06:00:00 3 -1.8 99 eor ## 8 2261 2018-11-19 07:00:00 3 -1.5 99 eor ## 9 2261 2018-11-19 08:00:00 3 -1.1 99 eor ## 10 2261 2018-11-19 09:00:00 3 -0.6 97 eor ## # ‚Ä¶ with 39,590 more rows After conversion, the variables is recognised as &lt;dttm&gt; for date-time. 5.2.3 Summarize The three meteo station have the following IDs: station_ids &lt;- c(&#39;2261&#39; = &#39;Hof&#39;, &#39;1420&#39; = &#39;Frankfurt&#39;, &#39;2667&#39; = &#39;Koeln&#39;) We want to know how many measurements per station the data set contains. temp_humid %&gt;% group_by(STATIONS_ID) %&gt;% count() ## # A tibble: 3 x 2 ## # Groups: STATIONS_ID [3] ## STATIONS_ID n ## &lt;dbl&gt; &lt;int&gt; ## 1 1420 13200 ## 2 2261 13200 ## 3 2667 13200 The operator %&gt;% is called pipe and is pronounced as and then. The code temp_humid %&gt;% group_by(STATIONS_ID) %&gt;% count() can be read as: take the object temp_humid, group it by STATIONS_ID and count the measurments in each group. The pipe operator comes from the package magrittr (https://magrittr.tidyverse.org/). It is a core operator in tidyverse and makes the code more readable and easier to follow for humans. Perhaps not in the beginning, but very soon ü§ì. 5.2.4 The grammar of data manipulation ‚Äì dplyr The function count() is part of the library dplyr, a collection of functions all named after verbs. Thus, it is easy to imagine what the function does üòÑ). The 5 core functions are: Function Meaning filter() filter data according to their values arrange() arrange rows select() select variables according to their names mutate() create new variables, possibly using other variables summarize() summarize data with different functions If we want to know how many measurements were recorded for a particular meteo station, we first filter for its ID: temp_humid %&gt;% filter(STATIONS_ID == &#39;2667&#39;) %&gt;% count() ## # A tibble: 1 x 1 ## n ## &lt;int&gt; ## 1 13200 The function filter() accepts logical tests. For every row in STATION_ID, == checks whether the entry equals 2667. == is a logical operator and means is the left side equals the right sight. If this is the case, then == returns TRUE otherwise it returns FALSE. filter() selects only those rows where TRUE was returned. Other useful logical operators are: Operator Meaning &gt; is the left side larger than the right side? &gt;= is the left side larger or equal the right side? != are left and right sides unequal? More logical and boolean operators are handeled in the tutorials (see below) and on help pages of filter(). We can combine several test with the operator or |, for example. Here, we want to filter all rows containing either ID 2667 or ID 2261: temp_humid %&gt;% filter(STATIONS_ID == &#39;2667&#39; | STATIONS_ID == &#39;2261&#39;) %&gt;% group_by(STATIONS_ID) %&gt;% count() ## # A tibble: 2 x 2 ## # Groups: STATIONS_ID [2] ## STATIONS_ID n ## &lt;dbl&gt; &lt;int&gt; ## 1 2261 13200 ## 2 2667 13200 The same can be achieved by excluding the third station: temp_humid %&gt;% filter(STATIONS_ID != &#39;1420&#39;) %&gt;% group_by(STATIONS_ID) %&gt;% count() ## # A tibble: 2 x 2 ## # Groups: STATIONS_ID [2] ## STATIONS_ID n ## &lt;dbl&gt; &lt;int&gt; ## 1 2261 13200 ## 2 2667 13200 As an alternative, we can use the operator %in% which checks whether the row contains one of the entries in a vector. temp_humid %&gt;% filter(STATIONS_ID %in% c(&#39;2667&#39;, &#39;2261&#39;)) %&gt;% group_by(STATIONS_ID) %&gt;% count() ## # A tibble: 2 x 2 ## # Groups: STATIONS_ID [2] ## STATIONS_ID n ## &lt;dbl&gt; &lt;int&gt; ## 1 2261 13200 ## 2 2667 13200 5.2.5 Visualise We plot the time series and use a trick to split them along three different plots with the function facet_wrap(). It needs a variable to separate the data into plots and we chose STATIONS_ID. The splitting variable must be preceeded by ~. ggplot(data = temp_humid, aes(x = MESS_DATUM, y = TT_TU)) + geom_line() + facet_wrap(~STATIONS_ID, nrow = 3) + labs(x = &#39;Time&#39;, y = &#39;Temperature (¬∞C)&#39;) 5.2.6 New variables with mutate() We want to calculate the monthly means and standard deviations of the air temperature and humidity. First, we need to generate the temporal information, namely year and month that will be used to group the temperature values to calculate mean() and sd(). This can be achieved with the functions year()and month() from library lubridate. The function mutate() can create new variables in a data object. temp_humid &lt;- temp_humid %&gt;% mutate(year = year(MESS_DATUM), month = month(MESS_DATUM)) temp_humid ## # A tibble: 39,600 x 8 ## STATIONS_ID MESS_DATUM QN_9 TT_TU RF_TU eor year month ## &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2261 2018-11-19 00:00:00 3 -2.8 99 eor 2018 11 ## 2 2261 2018-11-19 01:00:00 3 -2.5 100 eor 2018 11 ## 3 2261 2018-11-19 02:00:00 3 -2.3 100 eor 2018 11 ## 4 2261 2018-11-19 03:00:00 3 -2 100 eor 2018 11 ## 5 2261 2018-11-19 04:00:00 3 -1.9 99 eor 2018 11 ## 6 2261 2018-11-19 05:00:00 3 -2.1 99 eor 2018 11 ## 7 2261 2018-11-19 06:00:00 3 -1.8 99 eor 2018 11 ## 8 2261 2018-11-19 07:00:00 3 -1.5 99 eor 2018 11 ## 9 2261 2018-11-19 08:00:00 3 -1.1 99 eor 2018 11 ## 10 2261 2018-11-19 09:00:00 3 -0.6 97 eor 2018 11 ## # ‚Ä¶ with 39,590 more rows In the next step, we create a new data set and calculate the means and standard deviations. In order to get them by station, year and month, we group the data accordingly. To group by several variables, just enumerate them with a comma (no quotation or c() necessary). monthly_means &lt;- temp_humid %&gt;% group_by(STATIONS_ID, year, month) %&gt;% summarize(mean_T = mean(TT_TU), mean_RH = mean(RF_TU), sd_T = sd(TT_TU), sd_RH = sd(RF_TU)) ## `summarise()` has grouped output by &#39;STATIONS_ID&#39;, &#39;year&#39;. You can override using the `.groups` argument. monthly_means ## # A tibble: 57 x 7 ## # Groups: STATIONS_ID, year [9] ## STATIONS_ID year month mean_T mean_RH sd_T sd_RH ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1420 2018 11 4.00 79.7 1.82 9.96 ## 2 1420 2018 12 4.73 83.7 4.20 11.7 ## 3 1420 2019 1 2.12 79.3 3.76 10.0 ## 4 1420 2019 2 4.48 74.1 4.69 17.7 ## 5 1420 2019 3 8.28 68.5 4.08 16.1 ## 6 1420 2019 4 11.7 61.0 5.52 21.8 ## 7 1420 2019 5 12.7 67.5 4.64 20.1 ## 8 1420 2019 6 21.4 60.6 6.05 21.2 ## 9 1420 2019 7 21.6 55.6 5.90 21.8 ## 10 1420 2019 8 20.7 65.6 4.94 20.8 ## # ‚Ä¶ with 47 more rows The new object monthly_means is a grouped tibble, indicated by grouped_df in the output of str() that shows the structure of an object. str(monthly_means) ## grouped_df [57 √ó 7] (S3: grouped_df/tbl_df/tbl/data.frame) ## $ STATIONS_ID: num [1:57] 1420 1420 1420 1420 1420 1420 1420 1420 1420 1420 ... ## $ year : num [1:57] 2018 2018 2019 2019 2019 ... ## $ month : num [1:57] 11 12 1 2 3 4 5 6 7 8 ... ## $ mean_T : num [1:57] 4 4.73 2.12 4.48 8.28 ... ## $ mean_RH : num [1:57] 79.7 83.7 79.3 74.1 68.5 ... ## $ sd_T : num [1:57] 1.82 4.2 3.76 4.69 4.08 ... ## $ sd_RH : num [1:57] 9.96 11.68 10.04 17.73 16.1 ... ## - attr(*, &quot;groups&quot;)= tibble [9 √ó 3] (S3: tbl_df/tbl/data.frame) ## ..$ STATIONS_ID: num [1:9] 1420 1420 1420 2261 2261 ... ## ..$ year : num [1:9] 2018 2019 2020 2018 2019 ... ## ..$ .rows : list&lt;int&gt; [1:9] ## .. ..$ : int [1:2] 1 2 ## .. ..$ : int [1:12] 3 4 5 6 7 8 9 10 11 12 ... ## .. ..$ : int [1:5] 15 16 17 18 19 ## .. ..$ : int [1:2] 20 21 ## .. ..$ : int [1:12] 22 23 24 25 26 27 28 29 30 31 ... ## .. ..$ : int [1:5] 34 35 36 37 38 ## .. ..$ : int [1:2] 39 40 ## .. ..$ : int [1:12] 41 42 43 44 45 46 47 48 49 50 ... ## .. ..$ : int [1:5] 53 54 55 56 57 ## .. ..@ ptype: int(0) ## ..- attr(*, &quot;.drop&quot;)= logi TRUE Some calculations are better done on ungrouped data. Therefore, we remove the grouping. This does not change the data itself. monthly_means &lt;- ungroup(monthly_means) To plot the monthly data, we need a proper monthly date object. We will attribute the monthly means to the first of the respective month. Again, lubridate helps with this task. The function parse_dat_time() is a genral function taking a character string and returning a date-time object. We need to ‚Äúglue‚Äù the variables year and month together with paste0() (yes, it is a zero, not an O!) to form such a string and specify that orders = 'ym', i.e.¬†year before month. Finally, we relocate() the new variable year_month before the variable year for convenience (if not, it will be created as the last varialbe in the data set). monthly_means &lt;- monthly_means %&gt;% mutate(year_month = parse_date_time(paste0(year, month), orders = &#39;ym&#39;, tz = &#39;CET&#39;)) %&gt;% relocate(year_month, .before = year) monthly_means ## # A tibble: 57 x 8 ## STATIONS_ID year_month year month mean_T mean_RH sd_T sd_RH ## &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1420 2018-11-01 00:00:00 2018 11 4.00 79.7 1.82 9.96 ## 2 1420 2018-12-01 00:00:00 2018 12 4.73 83.7 4.20 11.7 ## 3 1420 2019-01-01 00:00:00 2019 1 2.12 79.3 3.76 10.0 ## 4 1420 2019-02-01 00:00:00 2019 2 4.48 74.1 4.69 17.7 ## 5 1420 2019-03-01 00:00:00 2019 3 8.28 68.5 4.08 16.1 ## 6 1420 2019-04-01 00:00:00 2019 4 11.7 61.0 5.52 21.8 ## 7 1420 2019-05-01 00:00:00 2019 5 12.7 67.5 4.64 20.1 ## 8 1420 2019-06-01 00:00:00 2019 6 21.4 60.6 6.05 21.2 ## 9 1420 2019-07-01 00:00:00 2019 7 21.6 55.6 5.90 21.8 ## 10 1420 2019-08-01 00:00:00 2019 8 20.7 65.6 4.94 20.8 ## # ‚Ä¶ with 47 more rows Now, we can plot the mean air temperature. ggplot(data = monthly_means, aes(x = year_month, y = mean_T, col = factor(STATIONS_ID))) + geom_line() + labs(x = &#39;Time&#39;, y = &#39;Temperature (¬∞C)&#39;, color = &#39;Meteo station&#39;) We can also visualise the standard deviations. ggplot(monthly_means, aes(x = year_month, y = mean_T, ymin = mean_T - sd_T, ymax = mean_T + sd_T)) + geom_errorbar() + geom_point() + facet_wrap(~STATIONS_ID, nrow = 3) + labs(x = &#39;Time&#39;, y = &#39;Temperature (¬∞C)&#39;) Or use a semi-transparent band to show the variability (standard deviation). ggplot(monthly_means, aes(x = year_month, y = mean_T, ymin = mean_T - sd_T, ymax = mean_T + sd_T)) + geom_ribbon(alpha = 0.5) + geom_line() + facet_wrap(~STATIONS_ID, nrow = 3) + labs(x = &#39;Time&#39;, y = &#39;Temperature (¬∞C)&#39;) One last detail. The titles on top of the facets show the station IDs. When you are not an employee of German Meteo Service, you probably do not know them by hart. It is better to use the city names. The vector station_ids is a so called named vector and has the right structure to change the titles in the facets: it assignes to every id its city name, i.e.¬†2261 = ‚ÄòHof.‚Äô station_ids ## 2261 1420 2667 ## &quot;Hof&quot; &quot;Frankfurt&quot; &quot;Koeln&quot; We use station_ids to change the titles: ggplot(monthly_means, aes(x = year_month, y = mean_T, ymin = mean_T - sd_T, ymax = mean_T + sd_T)) + geom_ribbon(alpha = 0.5) + geom_line() + facet_wrap(~STATIONS_ID, nrow = 3, labeller = labeller(STATIONS_ID = station_ids)) + labs(x = &#39;Time&#39;, y = &#39;Temperature (¬∞C)&#39;) 5.3 Practice on your own! Plot the means and standard deviations of the air humidity instead of air temperature. Do the tutorials ‚ÄúWork with data‚Äù from the Primers collection by RStudio Cloud. You can access the tutorials here: https://rstudio.cloud/learn/primers/2 Do the tutorials ‚ÄúVisualize Data‚Äù from the Primers collection by RStudio Cloud. You can access the tutorials here:https://rstudio.cloud/learn/primers/3 5.4 Reading assignment Read chapter 3 (to 3.5) in Ismay and Kim (2021) 5.5 Additional reading and videos More information on statistical graphical summaries and geoms: R4DS Wickham and Grolemund (2021): Chapter 5 ‚ÄúData transformation‚Äù A live exploratory data analysis by the main author of tidyverse, Hadley Wickham. Really informative, but Dr.¬†Wickham types too fast üòÑ. References "],["sampling.html", "6 Sampling and uncertainty 6.1 Practice on your own! 6.2 Reading assignment 6.3 Additional reading and videos", " 6 Sampling and uncertainty Conduct sampling using a computer experiment Explain uncertainty in random sampling Calculate sampling distributions With this chapter we start our journey into inferential statistics. Inferential statistics or simply inference wants to go beyond analysing single data sets It wants to know whether what we have observed in a single data set can generalized to a larger context. Often, this context is called population. And such generalization techniques are nothing else than estimation of population parameters. For example, if you want to know the mean income of a large group of people, you either can ask every person (if you have time and money to do so) or you ask just a cleverly chosen group, a sample, and try to estimate from their mean income, the mean income of the whole group. Another setting where you will want to use inference is doing experiments, e.g.¬†in the lab. Imagine you want to study the influence of increased temperature on the growth of a plant species. Then you would design an experiment where some plants of this species are grown at ambient temperature (control group) and some at increased temperature (treatment group). You measure their growth and want to know whether the difference observed is due to chance or whether this is a real difference. And if this is a real difference, how large is it and how precisely can we estimate it. All these questions can be answered using inference. We will do inference based on data science and a computer. Nowadays, computational power is usually no longer a problem and cool statistical inference can be done based on computer simulations and so called resampling techniques. In this chapter you will learn how to use a computer experiment to draw samples from a simulated data set. You will see that every random sample is different. This experience should elucidate the concept of randomness and uncertainty that underlies real experiments and data. 6.1 Practice on your own! blup 6.2 Reading assignment Read chapter 3 (to 3.5) in Ismay and Kim (2021) 6.3 Additional reading and videos More information on statistical graphical summaries and geoms: R4DS Wickham and Grolemund (2021): Chapter 5 ‚ÄúData transformation‚Äù A live exploratory data analysis by the main author of tidyverse, Hadley Wickham. Really informative, but Dr.¬†Wickham types too fast üòÑ. References "],["additional-exercises.html", "7 Additional exercises 7.1 Introduction to R and RStudio Server Pro 7.2 The big practical: importing, wrangling, summerizing and plotting", " 7 Additional exercises 7.1 Introduction to R and RStudio Server Pro 7.1.1 Rob‚Äôs account book The young master student Rob Stat thinks seriously about his mother‚Äôs advice to monitor his expenses. He begins by writing down what he spends during the week in the Mensa: Table 7.1: Rob‚Äôs account book Day of week Amount spent (‚Ç¨) Monday 2.57 Tuesday 2.90 Wednesday 2.73 Thrusday 3.23 Friday 3.90 Generate a vector of Rob‚Äôs expenses and assign it to the variable expenses. Use the function c() and use the numeric expenses only, not the days of the week. How much did Rob spend during this week? Use the function sum(). Rob seems to have spent the smallest amount on Tuesday. How much would he have spent if he paid that much every day of the week? Use the array notation with the square brackets. Unfortunately, Rob misspelled the amount on Tuesday. Actually, he invited his girl friend for lunch and paid 7.95 ‚Ç¨ instead of 2.90 ‚Ç¨. Correct Rob‚Äôs typo. How does the result change? 7.1.2 Missing values R codes missing values as NA. Rob ate in the Mensa last Monday, but forgot to write down the amount. Table 7.2: Rob‚Äôs account book, cont. Day of week Amount spent (‚Ç¨) Monday, 9 March 2.57 Tuesday, 10 March 2.90 Wednesday, 11 March 2.73 Thrusday, 12 March 3.23 Friday, 13 March 3.90 Monday, 16 March NA How does NA change the calculated sum? Read what happens when the data contains NAs by calling help on sum, i.e.¬†type ?sum in R console. Correct your call to sum() accordingly. 7.1.3 Your very first plot In particular in the beginning of learning R you should not forget why you are doing it. Because R is really beautiful and you want to analyse and learn from real data. Even if you don‚Äôt fully understand the following code, just copy and paste it into your .R file and let it run! library(tidyverse) library(gapminder) gapminder2007 &lt;- gapminder %&gt;% filter(year == 2007) ggplot(gapminder2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) + geom_point() + scale_x_log10() + xlab(&#39;GDP per capita&#39;) + ylab(&#39;Life expectancy&#39;) + labs(title = &#39;Gapminder data for the year 2007&#39;) What is the data set about. Use help like this ?gapminder. What do the colours represent? What does the size of the circles represent? How would you describe the relationship between the GDP per capita and Life expectancy? 7.2 The big practical: importing, wrangling, summerizing and plotting 7.2.1 Temperature along the Dutch coast The file Temperatur.csv from the book by Zuur, Ieno, and Meesters (2009) contains measurements of temperature, salinity and content of chlorophyll a at 31 locations along the Dutch coast. You can download the data set here. The data is provided by the Dutch institute RIKZ (monitoring program MWTL: Monitoring Waterstaatkundige Toestand des Lands), was measured between 1990 and 2005 between 0 and 4 times per month depending on the season. Read the file Temperatur.csv into R. Convert the column Date to a proper date format. Use the library lubridate. Calculate the number of measurements, mean and standard deviations of temperature per monitoring station. Hint: use n() inside summarize() to get the number of measurements. Calculate the number of measurements, mean and standard deviations of temperature per month. Plot the mean monthly temperature as a line and add the standard deviation as a band around it. Label the axis appropriately. Save you graph as a pdf file. 7.2.2 Temperature along the Dutch coast, revisited Calculate the monthly means and standard deviations per monitoring station. Hint group_by(Station, Month). Plot the means with an error band in different plots. Hint: use facet_wrap()). Save you graph as a pdf file. 7.2.3 Excel data turns tidy We will import and tidy World Development Indicators data downloaded from the World Bank on 2021-06-09 for 20 countries. This is an extract only and more data is available. This exercise will show you how to load excel data directly without converting it to .csv file. The format of the data is a typical non-tidy one and you will wrangle it to a tidy tibble. The file is called Data_Extract_From_World_Development_Indicators.xlsx. First, read the help pages of the function read_xlsx() in the library readxl. Pay attention to how you can specify the name of the excel sheet you want to read into R. Open the excel sheet and look through the data carefully. How are NAs coded? Which data sheet do you need to read? Read the excel file into R. Call it wdi. This data set is not tidy. In particular, the year is coded as column name. Those column names contain the year twice, once as a number and once as [YR NUMBER]. We rename the columns first. wdi &lt;- wdi %&gt;% rename_with(.fn = function(x) str_sub(x, start = 1, end = 4), .cols = starts_with(&#39;20&#39;)) What does this code mean? Read the help pages for functions rename_with(), str_sub() and starts_with(). Pivot the data set to a tidy format: variables in columns and measurements in rows. Use pivot_longer. wdi &lt;- wdi %&gt;% pivot_longer(names_to = &#39;year&#39;, values_to = &#39;indicator_value&#39;, cols = starts_with(&#39;20&#39;)) %&gt;% mutate(year = as.numeric(year)) wdi What does this code mean? Read the help pages for functions pivot_longer() and as.numeric(). Why is it necessary to convert year with as.numeric()? Filter for the indicator GDP (current US$) and plot the data as time series. Hint: You can also filter for the indicator‚Äôs code; look it up in the excel file. Label the axis appropriately. References "],["literature-1.html", "Literature", " Literature "]]
